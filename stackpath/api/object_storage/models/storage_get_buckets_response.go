// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageGetBucketsResponse The buckets for the given stack
// swagger:model storageGetBucketsResponse
type StorageGetBucketsResponse struct {

	// page info
	PageInfo *StorageGetBucketsResponsePageInfo `json:"pageInfo,omitempty"`

	// The requested buckets
	Results []*StorageGetBucketsResponseResultsItems0 `json:"results"`
}

// Validate validates this storage get buckets response
func (m *StorageGetBucketsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageGetBucketsResponse) validatePageInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PageInfo) { // not required
		return nil
	}

	if m.PageInfo != nil {
		if err := m.PageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pageInfo")
			}
			return err
		}
	}

	return nil
}

func (m *StorageGetBucketsResponse) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageGetBucketsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageGetBucketsResponse) UnmarshalBinary(b []byte) error {
	var res StorageGetBucketsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageGetBucketsResponsePageInfo Information about a paginated response
//
// This is modeled after the GraphQL Relay spec to support both cursor based pagination and traditional offset based pagination.
// swagger:model StorageGetBucketsResponsePageInfo
type StorageGetBucketsResponsePageInfo struct {

	// The cursor for the last item in the set of data returned
	EndCursor string `json:"endCursor,omitempty"`

	// Whether or not another page of data is available
	HasNextPage bool `json:"hasNextPage,omitempty"`

	// Whether or not a previous page of data exists
	HasPreviousPage bool `json:"hasPreviousPage,omitempty"`

	// The cursor for the first item in the set of data returned
	StartCursor string `json:"startCursor,omitempty"`

	// The total number of items in the dataset
	TotalCount string `json:"totalCount,omitempty"`
}

// Validate validates this storage get buckets response page info
func (m *StorageGetBucketsResponsePageInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageGetBucketsResponsePageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageGetBucketsResponsePageInfo) UnmarshalBinary(b []byte) error {
	var res StorageGetBucketsResponsePageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageGetBucketsResponseResultsItems0 storage get buckets response results items0
// swagger:model StorageGetBucketsResponseResultsItems0
type StorageGetBucketsResponseResultsItems0 struct {

	// The date when the bucket was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// The URL used to access the bucket
	EndpointURL string `json:"endpointUrl,omitempty"`

	// The ID for the bucket
	ID string `json:"id,omitempty"`

	// The name of the bucket
	Label string `json:"label,omitempty"`

	// The region in which the bucket is created. Available regions are: us-east-1, us-west-1, eu-central-1
	Region string `json:"region,omitempty"`

	// The date when the bucket was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// - PRIVATE: The bucket is private and only accessibly with credentials
	//  - PUBLIC: The bucket is public and accessible over the internet
	// Enum: [PRIVATE PUBLIC]
	Visibility *string `json:"visibility,omitempty"`
}

// Validate validates this storage get buckets response results items0
func (m *StorageGetBucketsResponseResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageGetBucketsResponseResultsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StorageGetBucketsResponseResultsItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var storageGetBucketsResponseResultsItems0TypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIVATE","PUBLIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageGetBucketsResponseResultsItems0TypeVisibilityPropEnum = append(storageGetBucketsResponseResultsItems0TypeVisibilityPropEnum, v)
	}
}

const (

	// StorageGetBucketsResponseResultsItems0VisibilityPRIVATE captures enum value "PRIVATE"
	StorageGetBucketsResponseResultsItems0VisibilityPRIVATE string = "PRIVATE"

	// StorageGetBucketsResponseResultsItems0VisibilityPUBLIC captures enum value "PUBLIC"
	StorageGetBucketsResponseResultsItems0VisibilityPUBLIC string = "PUBLIC"
)

// prop value enum
func (m *StorageGetBucketsResponseResultsItems0) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storageGetBucketsResponseResultsItems0TypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StorageGetBucketsResponseResultsItems0) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageGetBucketsResponseResultsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageGetBucketsResponseResultsItems0) UnmarshalBinary(b []byte) error {
	var res StorageGetBucketsResponseResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
