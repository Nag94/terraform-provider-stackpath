// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrometheusMetrics A collection of metrics
// swagger:model prometheusMetrics
type PrometheusMetrics struct {

	// data
	Data *PrometheusMetricsData `json:"data,omitempty"`

	// The error encountered when querying for metrics
	Error string `json:"error,omitempty"`

	// The type of error encountered when querying for metrics
	ErrorType string `json:"errorType,omitempty"`

	// status
	Status PrometheusMetricsStatus `json:"status,omitempty"`

	// Warnings encountered when querying for metrics
	Warnings []string `json:"warnings"`
}

// Validate validates this prometheus metrics
func (m *PrometheusMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusMetrics) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *PrometheusMetrics) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetrics) UnmarshalBinary(b []byte) error {
	var res PrometheusMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsData The data points in a metrics collection
// swagger:model PrometheusMetricsData
type PrometheusMetricsData struct {

	// matrix
	Matrix *PrometheusMetricsDataMatrix `json:"matrix,omitempty"`

	// vector
	Vector *PrometheusMetricsDataVector `json:"vector,omitempty"`
}

// Validate validates this prometheus metrics data
func (m *PrometheusMetricsData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatrix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusMetricsData) validateMatrix(formats strfmt.Registry) error {

	if swag.IsZero(m.Matrix) { // not required
		return nil
	}

	if m.Matrix != nil {
		if err := m.Matrix.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "matrix")
			}
			return err
		}
	}

	return nil
}

func (m *PrometheusMetricsData) validateVector(formats strfmt.Registry) error {

	if swag.IsZero(m.Vector) { // not required
		return nil
	}

	if m.Vector != nil {
		if err := m.Vector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsData) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsDataMatrix A set of time series containing a range of data points over time for each time series
// swagger:model PrometheusMetricsDataMatrix
type PrometheusMetricsDataMatrix struct {

	// A data point's value
	Results []*PrometheusMetricsDataMatrixResultsItems0 `json:"results"`
}

// Validate validates this prometheus metrics data matrix
func (m *PrometheusMetricsDataMatrix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusMetricsDataMatrix) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "matrix" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsDataMatrix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsDataMatrix) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsDataMatrix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsDataMatrixResultsItems0 Time series containing a range of data points over time for each time series
// swagger:model PrometheusMetricsDataMatrixResultsItems0
type PrometheusMetricsDataMatrixResultsItems0 struct {

	// The data points' labels
	Metric map[string]string `json:"metric,omitempty"`

	// Time series data point values
	Values []*PrometheusMetricsDataMatrixResultsItems0ValuesItems0 `json:"values"`
}

// Validate validates this prometheus metrics data matrix results items0
func (m *PrometheusMetricsDataMatrixResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusMetricsDataMatrixResultsItems0) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsDataMatrixResultsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsDataMatrixResultsItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsDataMatrixResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsDataMatrixResultsItems0ValuesItems0 An individual metric data point
// swagger:model PrometheusMetricsDataMatrixResultsItems0ValuesItems0
type PrometheusMetricsDataMatrixResultsItems0ValuesItems0 struct {

	// The time that a data point was recorded
	UnixTime string `json:"unixTime,omitempty"`

	// A data point's value
	Value string `json:"value,omitempty"`
}

// Validate validates this prometheus metrics data matrix results items0 values items0
func (m *PrometheusMetricsDataMatrixResultsItems0ValuesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsDataMatrixResultsItems0ValuesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsDataMatrixResultsItems0ValuesItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsDataMatrixResultsItems0ValuesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsDataVector A set of time series containing a single sample for each time series, all sharing the same timestamp
// swagger:model PrometheusMetricsDataVector
type PrometheusMetricsDataVector struct {

	// A data point's value
	Results []*PrometheusMetricsDataVectorResultsItems0 `json:"results"`
}

// Validate validates this prometheus metrics data vector
func (m *PrometheusMetricsDataVector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusMetricsDataVector) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(m.Results) { // not required
		return nil
	}

	for i := 0; i < len(m.Results); i++ {
		if swag.IsZero(m.Results[i]) { // not required
			continue
		}

		if m.Results[i] != nil {
			if err := m.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "vector" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsDataVector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsDataVector) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsDataVector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsDataVectorResultsItems0 Time series containing a single sample for each time series, all sharing the same timestamp
// swagger:model PrometheusMetricsDataVectorResultsItems0
type PrometheusMetricsDataVectorResultsItems0 struct {

	// The data points' labels
	Metric map[string]string `json:"metric,omitempty"`

	// value
	Value *PrometheusMetricsDataVectorResultsItems0Value `json:"value,omitempty"`
}

// Validate validates this prometheus metrics data vector results items0
func (m *PrometheusMetricsDataVectorResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrometheusMetricsDataVectorResultsItems0) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsDataVectorResultsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsDataVectorResultsItems0) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsDataVectorResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrometheusMetricsDataVectorResultsItems0Value An individual metric data point
// swagger:model PrometheusMetricsDataVectorResultsItems0Value
type PrometheusMetricsDataVectorResultsItems0Value struct {

	// The time that a data point was recorded
	UnixTime string `json:"unixTime,omitempty"`

	// A data point's value
	Value string `json:"value,omitempty"`
}

// Validate validates this prometheus metrics data vector results items0 value
func (m *PrometheusMetricsDataVectorResultsItems0Value) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrometheusMetricsDataVectorResultsItems0Value) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrometheusMetricsDataVectorResultsItems0Value) UnmarshalBinary(b []byte) error {
	var res PrometheusMetricsDataVectorResultsItems0Value
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
