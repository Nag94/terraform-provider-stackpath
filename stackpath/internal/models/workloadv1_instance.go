// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workloadv1Instance An instance of a workload deployment
// swagger:model workloadv1Instance
type Workloadv1Instance struct {

	// Status of the containers running within the workload instance
	ContainerStatuses []*V1ContainerStatus `json:"containerStatuses"`

	// containers
	Containers V1ContainerSpecMapEntry `json:"containers,omitempty"`

	// Status of the virtual machines running within the workload instance
	VirtualMachineStatuses []*V1VirtualMachineStatus `json:"virtualMachineStatuses"`

	// virtual machines
	VirtualMachines V1VirtualMachineSpecMapEntry `json:"virtualMachines,omitempty"`

	// The date an instance was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// The date an instance was deleted
	// Format: date-time
	DeletedAt strfmt.DateTime `json:"deletedAt,omitempty"`

	// An instance's publicly accessible IP address
	ExternalIPAddress string `json:"externalIpAddress,omitempty"`

	// An instance's unique identifier
	ID string `json:"id,omitempty"`

	// An instance's IP address
	IPAddress string `json:"ipAddress,omitempty"`

	// location
	Location *Workloadv1Location `json:"location,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// metadata
	Metadata *V1Metadata `json:"metadata,omitempty"`

	// An instance's name
	//
	// Instance names are generated from their corresponsing workload's slug, followed by a unique hash
	Name string `json:"name,omitempty"`

	// An instance's network interfaces
	NetworkInterfaces []*Workloadv1NetworkInterfaceStatus `json:"networkInterfaces"`

	// phase
	Phase Workloadv1InstanceInstancePhase `json:"phase,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// resources
	Resources *V1ResourceRequirements `json:"resources,omitempty"`

	// The ID of the stack that an instance belongs to
	StackID string `json:"stackId,omitempty"`

	// The date an instance was started
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`
}

// Validate validates this workloadv1 instance
func (m *Workloadv1Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workloadv1Instance) validateContainerStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainerStatuses); i++ {
		if swag.IsZero(m.ContainerStatuses[i]) { // not required
			continue
		}

		if m.ContainerStatuses[i] != nil {
			if err := m.ContainerStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containerStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Workloadv1Instance) validateContainers(formats strfmt.Registry) error {

	if swag.IsZero(m.Containers) { // not required
		return nil
	}

	if err := m.Containers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("containers")
		}
		return err
	}

	return nil
}

func (m *Workloadv1Instance) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workloadv1Instance) validateDeletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("deletedAt", "body", "date-time", m.DeletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workloadv1Instance) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Workloadv1Instance) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Workloadv1Instance) validateNetworkInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {
		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Workloadv1Instance) validatePhase(formats strfmt.Registry) error {

	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if err := m.Phase.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("phase")
		}
		return err
	}

	return nil
}

func (m *Workloadv1Instance) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *Workloadv1Instance) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workloadv1Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workloadv1Instance) UnmarshalBinary(b []byte) error {
	var res Workloadv1Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
