// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/stackpath/terraform-provider-stackpath/stackpath/internal/models"
)

// CreateWorkloadReader is a Reader for the CreateWorkload structure.
type CreateWorkloadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateWorkloadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateWorkloadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateWorkloadBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateWorkloadUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateWorkloadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateWorkloadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateWorkloadOK creates a CreateWorkloadOK with default headers values
func NewCreateWorkloadOK() *CreateWorkloadOK {
	return &CreateWorkloadOK{}
}

/*CreateWorkloadOK handles this case with default header values.

CreateWorkloadOK create workload Ok
*/
type CreateWorkloadOK struct {
	Payload *models.V1CreateWorkloadResponse
}

func (o *CreateWorkloadOK) Error() string {
	return fmt.Sprintf("[POST /workload/v1/stacks/{stack_id}/workloads][%d] createWorkloadOk  %+v", 200, o.Payload)
}

func (o *CreateWorkloadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1CreateWorkloadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkloadUnauthorized creates a CreateWorkloadUnauthorized with default headers values
func NewCreateWorkloadUnauthorized() *CreateWorkloadUnauthorized {
	return &CreateWorkloadUnauthorized{}
}

/*CreateWorkloadUnauthorized handles this case with default header values.

Returned when an unauthorized request is attempted.
*/
type CreateWorkloadUnauthorized struct {
	Payload *models.StackpathapiStatus
}

func (o *CreateWorkloadUnauthorized) Error() string {
	return fmt.Sprintf("[POST /workload/v1/stacks/{stack_id}/workloads][%d] createWorkloadUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateWorkloadUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

func NewCreateWorkloadBadRequest() *CreateWorkloadBadRequest {
	return &CreateWorkloadBadRequest{}
}

/*CreateWorkloadBadRequest handles this case with default header values.

Returned when an unauthorized request is attempted.
*/
type CreateWorkloadBadRequest struct {
	Payload *models.StackpathapiStatus
}

func (o *CreateWorkloadBadRequest) Error() string {
	return o.Payload.Message
}

func (o *CreateWorkloadBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkloadInternalServerError creates a CreateWorkloadInternalServerError with default headers values
func NewCreateWorkloadInternalServerError() *CreateWorkloadInternalServerError {
	return &CreateWorkloadInternalServerError{}
}

/*CreateWorkloadInternalServerError handles this case with default header values.

Internal server error.
*/
type CreateWorkloadInternalServerError struct {
	Payload *models.StackpathapiStatus
}

func (o *CreateWorkloadInternalServerError) Error() string {
	return fmt.Sprintf("[POST /workload/v1/stacks/{stack_id}/workloads][%d] createWorkloadInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateWorkloadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkloadDefault creates a CreateWorkloadDefault with default headers values
func NewCreateWorkloadDefault(code int) *CreateWorkloadDefault {
	return &CreateWorkloadDefault{
		_statusCode: code,
	}
}

/*CreateWorkloadDefault handles this case with default header values.

Default error structure.
*/
type CreateWorkloadDefault struct {
	_statusCode int

	Payload *models.StackpathapiStatus
}

// Code gets the status code for the create workload default response
func (o *CreateWorkloadDefault) Code() int {
	return o._statusCode
}

func (o *CreateWorkloadDefault) Error() string {
	return fmt.Sprintf("[POST /workload/v1/stacks/{stack_id}/workloads][%d] CreateWorkload default  %+v", o._statusCode, o.Payload)
}

func (o *CreateWorkloadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
